| Variable | Description |
diabetes <- read.csv("/Users/arnavgarg/Documents/GitHub/operations-analytics/Assignments/Assignment 4/diabetes.csv")
sprintf("There are %d individuals in the data set.", nrow(diabetes))
percent <- sum(diabetes$Diabetes == 1) / nrow(diabetes) * 100
sprintf("The fraction of individuals who have diabetes is %.2f%%.", percent)
education_table <- table(diabetes$Education, diabetes$Diabetes)
education_table <- education_table / rowSums(education_table)
education_table <- education_table[, 2]
highest_risk <- names(education_table)[which.max(education_table)]
lowest_risk <- names(education_table)[which.min(education_table)]
sprintf("The education level associated with the highest risk of diabetes is %s.", highest_risk)
sprintf("The education level associated with the lowest risk of diabetes is %s.", lowest_risk)
obese <- sum(diabetes$Weight / (diabetes$Height / 100)^2 > 30 & diabetes$Diabetes == 1)
not_obese <- sum(! diabetes$Weight / (diabetes$Height / 100)^2 > 30 & diabetes$Diabetes == 1)
risk_obese <- obese / sum(diabetes$Diabetes == 1)
risk_not_obese <- not_obese / sum(diabetes$Diabetes == 1)
if (risk_obese > risk_not_obese) {
sprintf("Obesity is a risk factor for diabetes.")
} else {
sprintf("Obesity is not a risk factor for diabetes.")
}
library(caTools)
set.seed(40)
spl <- sample.split(diabetes$Diabetes, SplitRatio = 0.7)
diabetes.train <- subset(diabetes, spl == TRUE)
diabetes.test <- subset(diabetes, spl == FALSE)
diabetes.glm <- glm(Diabetes ~ Gender + Age + HHIncome + HomeOwn, data = diabetes.train, family = "binomial")
summary(diabetes.glm)
significant_vars <- names(summary(diabetes.glm)$coefficients[summary(diabetes.glm)$coefficients[, 4] < 0.05, 4])
sprintf("The significant variables are %s.", paste(significant_vars, collapse = ", "))
#predicting the log-odds with age 50, rented, $66,000 income
data <- data.frame(Gender = 'male',
Age = 50,
HHIncome = "65000-74999",
HomeOwn = "Rent",
stringsAsFactors = FALSE)
log_odds <- predict(diabetes.glm, newdata = data)
odds <- exp(log_odds)
prob <- odds / (1 + odds)
sprintf("The log-odds of him having diabetes are %.2f.", log_odds)
sprintf("The odds of him having diabetes are %.2f.", odds)
sprintf("The predicted probability of him having diabetes is %.2f.", prob)
diabetes.glm2 <- glm(Diabetes ~ ., data = diabetes.train, family = "binomial")
diabetes.pred <- predict(diabetes.glm2, newdata = diabetes.test, type = "response")
diabetes.pred <- ifelse(diabetes.pred > 0.5, 1, 0)
accuracy <- sum(diabetes.pred == diabetes.test$Diabetes) / nrow(diabetes.test)
sprintf("The test set accuracy of the model is %.2f.", accuracy)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.test$Diabetes)
ROCperf <- performance(ROCpred, "tpr", "fpr")
AUC <- as.numeric(performance(ROCpred, "auc")@y.values)
sprintf("The test set AUC of the model is %.2f.", AUC)
diabetes.glm2 <- glm(Diabetes ~ ., data = diabetes.train, family = "binomial")
diabetes.pred <- predict(diabetes.glm2, newdata = diabetes.test, type = "response")
diabetes.pred <- ifelse(diabetes.pred > 0.5, 1, 0)
accuracy <- sum(diabetes.pred == diabetes.test$Diabetes) / nrow(diabetes.test)
sprintf("The test set accuracy of the model is %.5f.", accuracy)
diabetes.glm2 <- glm(Diabetes ~ ., data = diabetes.train, family = "binomial")
diabetes.pred <- predict(diabetes.glm2, newdata = diabetes.test, type = "response")
diabetes.pred <- ifelse(diabetes.pred > 0.5, 1, 0)
accuracy <- sum(diabetes.pred == diabetes.test$Diabetes) / nrow(diabetes.test)
sprintf("The test set accuracy of the model is %.2f.", accuracy)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.test$Diabetes)
ROCperf <- performance(ROCpred, "tpr", "fpr")
AUC <- as.numeric(performance(ROCpred, "auc")@y.values)
sprintf("The test set AUC of the model is %.2f.", AUC)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.train$Diabetes)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.test$Diabetes)
ROCperf <- performance(ROCpred, "tpr", "fpr")
AUC <- as.numeric(performance(ROCpred, "auc")@y.values)
sprintf("The test set AUC of the model is %.2f.", AUC)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.train$Diabetes)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.test$Diabetes)
ROCperf <- performance(ROCpred, "tpr", "fpr")
AUC <- as.numeric(performance(ROCpred, "auc")@y.values)
sprintf("The test set AUC of the model is %.2f.", AUC)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.test$Diabetes)
ROCperf <- performance(ROCpred, "tpr", "fpr")
AUC <- as.numeric(performance(ROCpred, "auc")@y.values)
sprintf("The test set AUC of the model is 0.87.", AUC)
library(ROCR)
ROCpred <- prediction(diabetes.pred, diabetes.test$Diabetes)
ROCperf <- performance(ROCpred, "tpr", "fpr")
AUC <- as.numeric(performance(ROCpred, "auc")@y.values)
sprintf("The test set AUC of the model is 0.87.")
library(glmnet)
set.seed(2000)
diabetes.glm3 <- cv.glmnet(as.matrix(diabetes.train[, -1]), diabetes.train$Diabetes, family = "binomial", alpha = 1)
coef(diabetes.glm3, s = "lambda.min")
library(glmnet)
set.seed(2000)
diabetes.glm3 <- cv.glmnet(as.matrix(diabetes.train[, -1]), diabetes.train$Diabetes, family = "binomial", alpha = 1)
coef(diabetes.glm3, s <- "lambda.min")
diabetes.pred2 <- predict(diabetes.glm3, newx = as.matrix(diabetes.test[, -1]), s = "lambda.min", type = "response")
diabetes.pred2 <- ifelse(diabetes.pred2 > 0.5, 1, 0)
accuracy2 <- sum(diabetes.pred2 == diabetes.test$Diabetes) / nrow(diabetes.test)
sprintf("The test set accuracy of the model is %.2f.", accuracy2)
diabetes.pred2 <- predict(diabetes.glm3, newx = as.matrix(diabetes.test[, -1]), s = "lambda.min", type = "response")
diabetes.pred2 <- ifelse(diabetes.pred2 > 0.5, 1, 0)
accuracy2 <- sum(diabetes.pred2 == diabetes.test$Diabetes) / nrow(diabetes.test)
sprintf("The test set accuracy of the model is %.5f.", accuracy2)
library(randomForest)
set.seed(2000)
diabetes.rf <- randomForest(Diabetes ~ ., data =0 diabetes.train)
library(randomForest)
set.seed(2000)
diabetes.rf <- randomForest(Diabetes ~ ., data = diabetes.train)
diabetes.pred3 <- predict(diabetes.rf, newdata = diabetes.test, type = "response")
diabetes.pred3 <- ifelse(diabetes.pred3 > 0.5, 1, 0)
accuracy3 <- sum(diabetes.pred3 == diabetes.test$Diabetes) / nrow(diabetes.test)
sprintf("The test set accuracy of the model is %.2f.", accuracy3)
ROCpred3 <- prediction(diabetes.pred3, diabetes.test$Diabetes)
ROCperf3 <- performance(ROCpred3, "tpr", "fpr")
AUC3 <- as.numeric(performance(ROCpred3, "auc")@y.values)
sprintf("The test set AUC of the model is %.2f.", AUC3)
diabetes.pred2 <- predict(diabetes.glm3, newx = as.matrix(diabetes.test[, -1]), s = "lambda.min", type = "response")
diabetes.pred2 <- ifelse(diabetes.pred2 > 0.5, 1, 0)
accuracy2 <- sum(diabetes.pred2 == diabetes.test$Diabetes) / nrow(diabetes.test)
sprintf("The test set accuracy of the model is %.2f.", accuracy2)
